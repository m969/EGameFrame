
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the FlatSharp FBS to C# compiler (source hash: 1.0.0.3fABrUB+iwxMIRBJ8GMgSR1UDELrqSCbzfCfDc412Y4=)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using FlatSharp;
using FlatSharp.Attributes;
namespace EGameFrame
{
    namespace Message
    {
        [FlatBufferTable]
        [System.Runtime.CompilerServices.CompilerGenerated]
        public partial class LoginRequest : object
        {
            partial void OnInitialized();
            public LoginRequest()
            {
                checked
                { this.OnInitialized(); }
            }

            public LoginRequest(LoginRequest source)
            {
                checked
                {
                    this.RpcId = source.RpcId;
                    this.Account = source.Account;
                    this.Password = source.Password;
                    this.OnInitialized();
                }
            }

            [FlatBufferItem(0)]
            public virtual System.Int32 RpcId { get; set; }
            [FlatBufferItem(1)]
            public virtual System.String Account { get; set; }
            [FlatBufferItem(2)]
            public virtual System.String Password { get; set; }
            public static ISerializer<EGameFrame.Message.LoginRequest> Serializer { get; } = new GeneratedSerializer().AsISerializer();

            #region Serializer for EGameFrame.Message.LoginRequest

            [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.GreedyMutable)]
            private sealed class GeneratedSerializer : IGeneratedSerializer<EGameFrame.Message.LoginRequest>
            {

                public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, EGameFrame.Message.LoginRequest root, int offset, SerializationContext context)
                    where TSpanWriter : ISpanWriter
                {
                    checked
                    {
                        WriteInlineValueOf_3e580efae9ae4361bad6b3b23502bf3b(writer, target, root, offset, context);
                    }
                }

                public int GetMaxSize(EGameFrame.Message.LoginRequest root)
                {
                    checked
                    {
                        return GetMaxSizeOf_3e580efae9ae4361bad6b3b23502bf3b(root);
                    }
                }

                public EGameFrame.Message.LoginRequest Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                    where TInputBuffer : IInputBuffer
                {
                    checked
                    {
                        return Read_3e580efae9ae4361bad6b3b23502bf3b(buffer, offset);
                    }
                }

                private static int GetMaxSizeOf_3e580efae9ae4361bad6b3b23502bf3b(EGameFrame.Message.LoginRequest value)
                {
                    checked
                    {

                        int runningSum = 28 + 11;
                        var index1Value = value.Account;

                        if (!object.ReferenceEquals(index1Value, null))
                        {
                            runningSum += GetMaxSizeOf_9c4e2304c19d45d0973d82979716c9e0(index1Value);
                        }
                        var index2Value = value.Password;

                        if (!object.ReferenceEquals(index2Value, null))
                        {
                            runningSum += GetMaxSizeOf_9c4e2304c19d45d0973d82979716c9e0(index2Value);
                        };
                        return runningSum;

                    }
                }

                private static EGameFrame.Message.LoginRequest Read_3e580efae9ae4361bad6b3b23502bf3b<TInputBuffer>(
                    TInputBuffer buffer,
                    int offset) where TInputBuffer : IInputBuffer
                {
                    checked
                    {
                        return new tableReader_6dba9b5940ce44deb7e4f98014fb91de<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                    }
                }

                private sealed class tableReader_6dba9b5940ce44deb7e4f98014fb91de<TInputBuffer> : EGameFrame.Message.LoginRequest where TInputBuffer : IInputBuffer
                {



                    public tableReader_6dba9b5940ce44deb7e4f98014fb91de(TInputBuffer buffer, int offset)
                    {
                        checked
                        {
                            this.__index0 = __ReadIndex0Value(buffer, offset);
                            this.__index1 = __ReadIndex1Value(buffer, offset);
                            this.__index2 = __ReadIndex2Value(buffer, offset);
                        }
                    }

                    private System.Int32 __index0;
                    public override System.Int32 RpcId
                    {
                        get
                        {
                            checked
                            { return this.__index0; }
                        }

                        set
                        {
                            checked
                            { this.__index0 = value; }
                        }
                    }

                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    private static System.Int32 __ReadIndex0Value(TInputBuffer buffer, int offset)
                    {
                        checked
                        {
                            int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                            if (absoluteLocation == 0)
                            {
                                return default(System.Int32);
                            }
                            else
                            {
                                return Read_06e2f2a7ec5343afa9c94e6d94ed05e7(buffer, absoluteLocation);
                            }
                        }
                    }

                    private System.String __index1;
                    public override System.String Account
                    {
                        get
                        {
                            checked
                            { return this.__index1; }
                        }

                        set
                        {
                            checked
                            { this.__index1 = value; }
                        }
                    }

                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    private static System.String __ReadIndex1Value(TInputBuffer buffer, int offset)
                    {
                        checked
                        {
                            int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                            if (absoluteLocation == 0)
                            {
                                return default(System.String);
                            }
                            else
                            {
                                return Read_9c4e2304c19d45d0973d82979716c9e0(buffer, absoluteLocation);
                            }
                        }
                    }

                    private System.String __index2;
                    public override System.String Password
                    {
                        get
                        {
                            checked
                            { return this.__index2; }
                        }

                        set
                        {
                            checked
                            { this.__index2 = value; }
                        }
                    }

                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    private static System.String __ReadIndex2Value(TInputBuffer buffer, int offset)
                    {
                        checked
                        {
                            int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                            if (absoluteLocation == 0)
                            {
                                return default(System.String);
                            }
                            else
                            {
                                return Read_9c4e2304c19d45d0973d82979716c9e0(buffer, absoluteLocation);
                            }
                        }
                    }
                }



                private static void WriteInlineValueOf_3e580efae9ae4361bad6b3b23502bf3b<TSpanWriter>(
                    TSpanWriter spanWriter,
                    Span<byte> span,
                    EGameFrame.Message.LoginRequest value,
                    int offset,
                    SerializationContext context) where TSpanWriter : ISpanWriter
                {
                    checked
                    {

                        int tableStart = context.AllocateSpace(25, sizeof(int));
                        spanWriter.WriteUOffset(span, offset, tableStart, context);
                        int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                        Span<byte> vtable = stackalloc byte[10];
                        int maxVtableIndex = -1;
                        vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                        var index0Value = value.RpcId;
                        var index0Offset = 0;
                        if (index0Value != default(System.Int32))
                        {

                            currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                            index0Offset = currentOffset;
                            spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                            maxVtableIndex = 0;
                            currentOffset += 4;

                        }

                        var index1Value = value.Account;
                        var index1Offset = 0;
                        if (index1Value != default(System.String))
                        {

                            currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                            index1Offset = currentOffset;
                            spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                            maxVtableIndex = 1;
                            currentOffset += 4;

                        }

                        var index2Value = value.Password;
                        var index2Offset = 0;
                        if (index2Value != default(System.String))
                        {

                            currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                            index2Offset = currentOffset;
                            spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                            maxVtableIndex = 2;
                            currentOffset += 4;

                        }
                        int tableLength = currentOffset - tableStart;
                        context.Offset -= 25 - tableLength;
                        int vtableLength = 6 + (2 * maxVtableIndex);
                        spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                        spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                        int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                        spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                        if (index0Offset != 0)
                        {
                            WriteInlineValueOf_06e2f2a7ec5343afa9c94e6d94ed05e7(
                                spanWriter,
                                span,
                                index0Value,
                                index0Offset,
                                context);

                        }

                        if (index1Offset != 0)
                        {
                            WriteInlineValueOf_9c4e2304c19d45d0973d82979716c9e0(
                                spanWriter,
                                span,
                                index1Value,
                                index1Offset,
                                context);

                        }

                        if (index2Offset != 0)
                        {
                            WriteInlineValueOf_9c4e2304c19d45d0973d82979716c9e0(
                                spanWriter,
                                span,
                                index2Value,
                                index2Offset,
                                context);

                        }
                    }
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static int GetMaxSizeOf_06e2f2a7ec5343afa9c94e6d94ed05e7(System.Int32 value)
                {
                    checked
                    {
                        return 7;
                    }
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Int32 Read_06e2f2a7ec5343afa9c94e6d94ed05e7<TInputBuffer>(
                    TInputBuffer buffer,
                    int offset) where TInputBuffer : IInputBuffer
                {
                    checked
                    {
                        return buffer.ReadInt(offset);
                    }
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static void WriteInlineValueOf_06e2f2a7ec5343afa9c94e6d94ed05e7<TSpanWriter>(
                    TSpanWriter spanWriter,
                    Span<byte> span,
                    System.Int32 value,
                    int offset,
                    SerializationContext context) where TSpanWriter : ISpanWriter
                {
                    checked
                    {
                        spanWriter.WriteInt(span, value, offset, context);
                    }
                }

                private static int GetMaxSizeOf_9c4e2304c19d45d0973d82979716c9e0(System.String value)
                {
                    checked
                    {
                        return SerializationHelpers.GetMaxSize(value);
                    }
                }

                private static System.String Read_9c4e2304c19d45d0973d82979716c9e0<TInputBuffer>(
                    TInputBuffer buffer,
                    int offset) where TInputBuffer : IInputBuffer
                {
                    checked
                    {
                        return buffer.ReadString(offset);
                    }
                }

                private static void WriteInlineValueOf_9c4e2304c19d45d0973d82979716c9e0<TSpanWriter>(
                    TSpanWriter spanWriter,
                    Span<byte> span,
                    System.String value,
                    int offset,
                    SerializationContext context) where TSpanWriter : ISpanWriter
                {
                    checked
                    {
                        spanWriter.WriteString(span, value, offset, context);
                    }
                }
            }

            #endregion
        }
    }
}
