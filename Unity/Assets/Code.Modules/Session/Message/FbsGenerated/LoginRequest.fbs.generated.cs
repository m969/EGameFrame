
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the FlatSharp FBS to C# compiler (source hash: 1.0.0.Bk/TPOVJG4BhMcCMgvWTQhKHeZ224z9zQG76f6bk2rI=)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using FlatSharp;
using FlatSharp.Attributes;
namespace EGameFrame
{
    namespace Message
    {
        [FlatBufferTable]
        [System.Runtime.CompilerServices.CompilerGenerated]
        public partial class LoginRequest : object
        {
            partial void OnInitialized();
            public LoginRequest()
            {
                checked
                { this.OnInitialized(); }
            }

            public LoginRequest(LoginRequest source)
            {
                checked
                {
                    this.RpcId = source.RpcId;
                    this.OnInitialized();
                }
            }

            [FlatBufferItem(0)]
            public virtual System.Byte RpcId { get; set; }
            public static ISerializer<EGameFrame.Message.LoginRequest> Serializer { get; } = new GeneratedSerializer().AsISerializer();

            #region Serializer for EGameFrame.Message.LoginRequest

            [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.GreedyMutable)]
            private sealed class GeneratedSerializer : IGeneratedSerializer<EGameFrame.Message.LoginRequest>
            {

                public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, EGameFrame.Message.LoginRequest root, int offset, SerializationContext context)
                    where TSpanWriter : ISpanWriter
                {
                    checked
                    {
                        WriteInlineValueOf_f20a87595ca74103adcc4c958d266e10(writer, target, root, offset, context);
                    }
                }

                public int GetMaxSize(EGameFrame.Message.LoginRequest root)
                {
                    checked
                    {
                        return GetMaxSizeOf_f20a87595ca74103adcc4c958d266e10(root);
                    }
                }

                public EGameFrame.Message.LoginRequest Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                    where TInputBuffer : IInputBuffer
                {
                    checked
                    {
                        return Read_f20a87595ca74103adcc4c958d266e10(buffer, offset);
                    }
                }

                private static int GetMaxSizeOf_f20a87595ca74103adcc4c958d266e10(EGameFrame.Message.LoginRequest value)
                {
                    checked
                    {

                        int runningSum = 8 + 7;
                        ;
                        return runningSum;

                    }
                }

                private static EGameFrame.Message.LoginRequest Read_f20a87595ca74103adcc4c958d266e10<TInputBuffer>(
                    TInputBuffer buffer,
                    int offset) where TInputBuffer : IInputBuffer
                {
                    checked
                    {
                        return new tableReader_b675370d4d3a4de48d31bbb0af144573<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                    }
                }

                private sealed class tableReader_b675370d4d3a4de48d31bbb0af144573<TInputBuffer> : EGameFrame.Message.LoginRequest where TInputBuffer : IInputBuffer
                {



                    public tableReader_b675370d4d3a4de48d31bbb0af144573(TInputBuffer buffer, int offset)
                    {
                        checked
                        {
                            this.__index0 = __ReadIndex0Value(buffer, offset);
                        }
                    }

                    private System.Byte __index0;
                    public override System.Byte RpcId
                    {
                        get
                        {
                            checked
                            { return this.__index0; }
                        }

                        set
                        {
                            checked
                            { this.__index0 = value; }
                        }
                    }

                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    private static System.Byte __ReadIndex0Value(TInputBuffer buffer, int offset)
                    {
                        checked
                        {
                            int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                            if (absoluteLocation == 0)
                            {
                                return default(System.Byte);
                            }
                            else
                            {
                                return Read_e5145af0b1d64e21a9e6010337303598(buffer, absoluteLocation);
                            }
                        }
                    }
                }



                private static void WriteInlineValueOf_f20a87595ca74103adcc4c958d266e10<TSpanWriter>(
                    TSpanWriter spanWriter,
                    Span<byte> span,
                    EGameFrame.Message.LoginRequest value,
                    int offset,
                    SerializationContext context) where TSpanWriter : ISpanWriter
                {
                    checked
                    {

                        int tableStart = context.AllocateSpace(5, sizeof(int));
                        spanWriter.WriteUOffset(span, offset, tableStart, context);
                        int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                        Span<byte> vtable = stackalloc byte[6];
                        int maxVtableIndex = -1;
                        vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                        var index0Value = value.RpcId;
                        var index0Offset = 0;
                        if (index0Value != default(System.Byte))
                        {

                            currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                            index0Offset = currentOffset;
                            spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                            maxVtableIndex = 0;
                            currentOffset += 1;

                        }
                        int tableLength = currentOffset - tableStart;
                        context.Offset -= 5 - tableLength;
                        int vtableLength = 6 + (2 * maxVtableIndex);
                        spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                        spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                        int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                        spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                        if (index0Offset != 0)
                        {
                            WriteInlineValueOf_e5145af0b1d64e21a9e6010337303598(
                                spanWriter,
                                span,
                                index0Value,
                                index0Offset,
                                context);

                        }
                    }
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static int GetMaxSizeOf_e5145af0b1d64e21a9e6010337303598(System.Byte value)
                {
                    checked
                    {
                        return 1;
                    }
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Byte Read_e5145af0b1d64e21a9e6010337303598<TInputBuffer>(
                    TInputBuffer buffer,
                    int offset) where TInputBuffer : IInputBuffer
                {
                    checked
                    {
                        return buffer.ReadByte(offset);
                    }
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static void WriteInlineValueOf_e5145af0b1d64e21a9e6010337303598<TSpanWriter>(
                    TSpanWriter spanWriter,
                    Span<byte> span,
                    System.Byte value,
                    int offset,
                    SerializationContext context) where TSpanWriter : ISpanWriter
                {
                    checked
                    {
                        spanWriter.WriteByte(span, value, offset, context);
                    }
                }
            }

            #endregion
        }
    }
}
