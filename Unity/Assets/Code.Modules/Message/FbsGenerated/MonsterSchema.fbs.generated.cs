
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the FlatSharp FBS to C# compiler (source hash: 1.0.0.ab3biciF1s4tiqaGWNdaUkrIVPRG04RZGypxtlajVuE=)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using FlatSharp;
using FlatSharp.Attributes;
namespace MyGame
{
    namespace Sample
    {
        [FlatBufferEnum(typeof(System.SByte))]
        [System.Runtime.CompilerServices.CompilerGenerated]
        public enum Color : System.SByte
        {
            Red = (sbyte)(0),
            Green = (sbyte)(1),
            Blue = (sbyte)(2),
        }

        [System.Runtime.CompilerServices.CompilerGenerated]
        public partial class Equipment : FlatBufferUnion<global::MyGame.Sample.Weapon>
        {
            public enum ItemKind : byte
            {
                Weapon = 1,
            }


            public ItemKind Kind => (ItemKind)base.Discriminator;

            public Equipment(global::MyGame.Sample.Weapon value) : base(value)
            {
                checked
                { }
            }

            public global::MyGame.Sample.Weapon Weapon => base.Item1;

            public new Equipment Clone(
                Func<global::MyGame.Sample.Weapon, global::MyGame.Sample.Weapon> cloneWeapon
            )
            {
                checked
                {
                    switch (base.Discriminator)
                    {
                        case 1:
                            return new Equipment(cloneWeapon(base.item1));
                    }

                    throw new System.InvalidOperationException();
                }
            }

            public new TReturn Switch<TState, TReturn>(
                TState state,
                Func<TState, TReturn> caseDefault
                , Func<TState, global::MyGame.Sample.Weapon, TReturn> caseWeapon
            ) => base.Switch<TState, TReturn>(state, caseDefault, caseWeapon);
            public new TReturn Switch<TReturn>(
                Func<TReturn> caseDefault
                , Func<global::MyGame.Sample.Weapon, TReturn> caseWeapon
            ) => base.Switch<TReturn>(caseDefault, caseWeapon);
            public new void Switch<TState>(
                TState state,
                Action<TState> caseDefault
                , Action<TState, global::MyGame.Sample.Weapon> caseWeapon
            ) => base.Switch<TState>(state, caseDefault, caseWeapon);
            public new void Switch(
                Action caseDefault
                , Action<global::MyGame.Sample.Weapon> caseWeapon
            ) => base.Switch(caseDefault, caseWeapon);
        }

        [FlatBufferStruct]
        [System.Runtime.CompilerServices.CompilerGenerated]
        public partial class Vec3 : object
        {
            partial void OnInitialized();
            public Vec3()
            {
                checked
                { this.OnInitialized(); }
            }

            public Vec3(Vec3 source)
            {
                checked
                {
                    this.x = source.x;
                    this.y = source.y;
                    this.z = source.z;
                    this.OnInitialized();
                }
            }

            [FlatBufferItem(0)]
            public virtual System.Single x { get; set; }
            [FlatBufferItem(1)]
            public virtual System.Single y { get; set; }
            [FlatBufferItem(2)]
            public virtual System.Single z { get; set; }
        }
        [FlatBufferTable]
        [System.Runtime.CompilerServices.CompilerGenerated]
        public partial class Monster : object
        {
            partial void OnInitialized();
            public Monster()
            {
                checked
                { this.OnInitialized(); }
            }

            public Monster(Monster source)
            {
                checked
                {
                    this.pos = source.pos != null ? new MyGame.Sample.Vec3(source.pos) : null;
                    this.mana = source.mana;
                    this.hp = source.hp;
                    this.name = source.name;
                    this.friendly = source.friendly;
                    this.inventory = source.inventory?.ToList();
                    this.color = source.color;
                    this.weapons = source.weapons?.Select(x => x != null ? new MyGame.Sample.Weapon(x) : null).ToList();
                    this.equipped = source.equipped?.Clone(x => x != null ? new MyGame.Sample.Weapon(x) : null);
                    this.path = source.path?.Select(x => x != null ? new MyGame.Sample.Vec3(x) : null).ToList();
                    this.OnInitialized();
                }
            }

            [FlatBufferItem(0)]
            public virtual global::MyGame.Sample.Vec3 pos { get; set; }
            [FlatBufferItem(1, DefaultValue = (short)(150))]
            public virtual System.Int16 mana { get; set; } = (short)(150);
            [FlatBufferItem(2, DefaultValue = (short)(100))]
            public virtual System.Int16 hp { get; set; } = (short)(100);
            [FlatBufferItem(3)]
            public virtual System.String name { get; set; }
            [FlatBufferItem(4, DefaultValue = (bool)(false), Deprecated = true)]
            public virtual System.Boolean friendly { get; set; } = (bool)(false);
            [FlatBufferItem(5)]
            public virtual IList<System.Byte> inventory { get; set; }
            [FlatBufferItem(6, DefaultValue = global::MyGame.Sample.Color.Blue)]
            public virtual global::MyGame.Sample.Color color { get; set; } = global::MyGame.Sample.Color.Blue;
            [FlatBufferItem(7)]
            public virtual IList<global::MyGame.Sample.Weapon> weapons { get; set; }
            [FlatBufferItem(8)]
            public virtual global::MyGame.Sample.Equipment equipped { get; set; }
            [FlatBufferItem(10)]
            public virtual IList<global::MyGame.Sample.Vec3> path { get; set; }
            public static ISerializer<MyGame.Sample.Monster> Serializer { get; } = new GeneratedSerializer().AsISerializer();

            #region Serializer for MyGame.Sample.Monster

            [FlatSharpGeneratedSerializerAttribute(FlatBufferDeserializationOption.GreedyMutable)]
            private sealed class GeneratedSerializer : IGeneratedSerializer<MyGame.Sample.Monster>
            {

                public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, MyGame.Sample.Monster root, int offset, SerializationContext context)
                    where TSpanWriter : ISpanWriter
                {
                    checked
                    {
                        WriteInlineValueOf_647c8ea6b7be4f7ba5e22ebd56d68efd(writer, target, root, offset, context);
                    }
                }

                public int GetMaxSize(MyGame.Sample.Monster root)
                {
                    checked
                    {
                        return GetMaxSizeOf_647c8ea6b7be4f7ba5e22ebd56d68efd(root);
                    }
                }

                public MyGame.Sample.Monster Parse<TInputBuffer>(TInputBuffer buffer, int offset)
                    where TInputBuffer : IInputBuffer
                {
                    checked
                    {
                        return Read_647c8ea6b7be4f7ba5e22ebd56d68efd(buffer, offset);
                    }
                }

                private static int GetMaxSizeOf_647c8ea6b7be4f7ba5e22ebd56d68efd(MyGame.Sample.Monster value)
                {
                    checked
                    {

                        int runningSum = 65 + 27;
                        var index3Value = value.name;

                        if (!object.ReferenceEquals(index3Value, null))
                        {
                            runningSum += GetMaxSizeOf_a661a87e0ec6485c9e56cd69a351113f(index3Value);
                        }
                        var index5Value = value.inventory;

                        if (!object.ReferenceEquals(index5Value, null))
                        {
                            runningSum += GetMaxSizeOf_928ee2ec77a34be8be5994a71da46c23(index5Value);
                        }
                        var index7Value = value.weapons;

                        if (!object.ReferenceEquals(index7Value, null))
                        {
                            runningSum += GetMaxSizeOf_e06a6a71b25d4ef3b18e42478bf08e9a(index7Value);
                        }
                        var index8Value = value.equipped;

                        if (!object.ReferenceEquals(index8Value, null))
                        {
                            runningSum += GetMaxSizeOf_f2028d3c9eed4610901492fe1b4ec11d(index8Value);
                        }
                        var index10Value = value.path;

                        if (!object.ReferenceEquals(index10Value, null))
                        {
                            runningSum += GetMaxSizeOf_e014680f69064ee39e78271202763597(index10Value);
                        };
                        return runningSum;

                    }
                }

                private static MyGame.Sample.Monster Read_647c8ea6b7be4f7ba5e22ebd56d68efd<TInputBuffer>(
                    TInputBuffer buffer,
                    int offset) where TInputBuffer : IInputBuffer
                {
                    checked
                    {
                        return new tableReader_8d52bd51d50e4c489edad4de4ff05e5e<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                    }
                }

                private sealed class tableReader_8d52bd51d50e4c489edad4de4ff05e5e<TInputBuffer> : MyGame.Sample.Monster where TInputBuffer : IInputBuffer
                {



                    public tableReader_8d52bd51d50e4c489edad4de4ff05e5e(TInputBuffer buffer, int offset)
                    {
                        checked
                        {
                            this.__index0 = __ReadIndex0Value(buffer, offset);
                            this.__index1 = __ReadIndex1Value(buffer, offset);
                            this.__index2 = __ReadIndex2Value(buffer, offset);
                            this.__index3 = __ReadIndex3Value(buffer, offset);
                            this.__index5 = __ReadIndex5Value(buffer, offset);
                            this.__index6 = __ReadIndex6Value(buffer, offset);
                            this.__index7 = __ReadIndex7Value(buffer, offset);
                            this.__index8 = __ReadIndex8Value(buffer, offset);
                            this.__index10 = __ReadIndex10Value(buffer, offset);
                        }
                    }

                    private MyGame.Sample.Vec3 __index0;
                    public override MyGame.Sample.Vec3 pos
                    {
                        get
                        {
                            checked
                            { return this.__index0; }
                        }

                        set
                        {
                            checked
                            { this.__index0 = value; }
                        }
                    }

                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    private static MyGame.Sample.Vec3 __ReadIndex0Value(TInputBuffer buffer, int offset)
                    {
                        checked
                        {
                            int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                            if (absoluteLocation == 0)
                            {
                                return default(MyGame.Sample.Vec3);
                            }
                            else
                            {
                                return Read_f6917f55d17a4358954e36f72761b68c(buffer, absoluteLocation);
                            }
                        }
                    }

                    private System.Int16 __index1;
                    public override System.Int16 mana
                    {
                        get
                        {
                            checked
                            { return this.__index1; }
                        }

                        set
                        {
                            checked
                            { this.__index1 = value; }
                        }
                    }

                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    private static System.Int16 __ReadIndex1Value(TInputBuffer buffer, int offset)
                    {
                        checked
                        {
                            int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                            if (absoluteLocation == 0)
                            {
                                return (System.Int16)(150);
                            }
                            else
                            {
                                return Read_7d738ae7cd844b178d6371d1c455fcb1(buffer, absoluteLocation);
                            }
                        }
                    }

                    private System.Int16 __index2;
                    public override System.Int16 hp
                    {
                        get
                        {
                            checked
                            { return this.__index2; }
                        }

                        set
                        {
                            checked
                            { this.__index2 = value; }
                        }
                    }

                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    private static System.Int16 __ReadIndex2Value(TInputBuffer buffer, int offset)
                    {
                        checked
                        {
                            int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 2);
                            if (absoluteLocation == 0)
                            {
                                return (System.Int16)(100);
                            }
                            else
                            {
                                return Read_7d738ae7cd844b178d6371d1c455fcb1(buffer, absoluteLocation);
                            }
                        }
                    }

                    private System.String __index3;
                    public override System.String name
                    {
                        get
                        {
                            checked
                            { return this.__index3; }
                        }

                        set
                        {
                            checked
                            { this.__index3 = value; }
                        }
                    }

                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    private static System.String __ReadIndex3Value(TInputBuffer buffer, int offset)
                    {
                        checked
                        {
                            int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 3);
                            if (absoluteLocation == 0)
                            {
                                return default(System.String);
                            }
                            else
                            {
                                return Read_a661a87e0ec6485c9e56cd69a351113f(buffer, absoluteLocation);
                            }
                        }
                    }

                    private System.Collections.Generic.IList<System.Byte> __index5;
                    public override System.Collections.Generic.IList<System.Byte> inventory
                    {
                        get
                        {
                            checked
                            { return this.__index5; }
                        }

                        set
                        {
                            checked
                            { this.__index5 = value; }
                        }
                    }

                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    private static System.Collections.Generic.IList<System.Byte> __ReadIndex5Value(TInputBuffer buffer, int offset)
                    {
                        checked
                        {
                            int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 5);
                            if (absoluteLocation == 0)
                            {
                                return default(System.Collections.Generic.IList<System.Byte>);
                            }
                            else
                            {
                                return Read_928ee2ec77a34be8be5994a71da46c23(buffer, absoluteLocation);
                            }
                        }
                    }

                    private MyGame.Sample.Color __index6;
                    public override MyGame.Sample.Color color
                    {
                        get
                        {
                            checked
                            { return this.__index6; }
                        }

                        set
                        {
                            checked
                            { this.__index6 = value; }
                        }
                    }

                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    private static MyGame.Sample.Color __ReadIndex6Value(TInputBuffer buffer, int offset)
                    {
                        checked
                        {
                            int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 6);
                            if (absoluteLocation == 0)
                            {
                                return (MyGame.Sample.Color)(System.SByte)(2);
                            }
                            else
                            {
                                return Read_49f75ab5ac47454f99f3c57d02034c64(buffer, absoluteLocation);
                            }
                        }
                    }

                    private System.Collections.Generic.IList<MyGame.Sample.Weapon> __index7;
                    public override System.Collections.Generic.IList<MyGame.Sample.Weapon> weapons
                    {
                        get
                        {
                            checked
                            { return this.__index7; }
                        }

                        set
                        {
                            checked
                            { this.__index7 = value; }
                        }
                    }

                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    private static System.Collections.Generic.IList<MyGame.Sample.Weapon> __ReadIndex7Value(TInputBuffer buffer, int offset)
                    {
                        checked
                        {
                            int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 7);
                            if (absoluteLocation == 0)
                            {
                                return default(System.Collections.Generic.IList<MyGame.Sample.Weapon>);
                            }
                            else
                            {
                                return Read_e06a6a71b25d4ef3b18e42478bf08e9a(buffer, absoluteLocation);
                            }
                        }
                    }

                    private MyGame.Sample.Equipment __index8;
                    public override MyGame.Sample.Equipment equipped
                    {
                        get
                        {
                            checked
                            { return this.__index8; }
                        }

                        set
                        {
                            checked
                            { this.__index8 = value; }
                        }
                    }

                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    private static MyGame.Sample.Equipment __ReadIndex8Value(TInputBuffer buffer, int offset)
                    {
                        checked
                        {
                            int firstLocation = buffer.GetAbsoluteTableFieldLocation(offset, 8);
                            if (firstLocation == 0)
                            {
                                return default(MyGame.Sample.Equipment);
                            }

                            var absoluteLocations = (firstLocation, buffer.GetAbsoluteTableFieldLocation(offset, 9));
                            return Read_f2028d3c9eed4610901492fe1b4ec11d(buffer, ref absoluteLocations);
                        }
                    }

                    private System.Collections.Generic.IList<MyGame.Sample.Vec3> __index10;
                    public override System.Collections.Generic.IList<MyGame.Sample.Vec3> path
                    {
                        get
                        {
                            checked
                            { return this.__index10; }
                        }

                        set
                        {
                            checked
                            { this.__index10 = value; }
                        }
                    }

                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    private static System.Collections.Generic.IList<MyGame.Sample.Vec3> __ReadIndex10Value(TInputBuffer buffer, int offset)
                    {
                        checked
                        {
                            int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 10);
                            if (absoluteLocation == 0)
                            {
                                return default(System.Collections.Generic.IList<MyGame.Sample.Vec3>);
                            }
                            else
                            {
                                return Read_e014680f69064ee39e78271202763597(buffer, absoluteLocation);
                            }
                        }
                    }
                }



                private static void WriteInlineValueOf_647c8ea6b7be4f7ba5e22ebd56d68efd<TSpanWriter>(
                    TSpanWriter spanWriter,
                    Span<byte> span,
                    MyGame.Sample.Monster value,
                    int offset,
                    SerializationContext context) where TSpanWriter : ISpanWriter
                {
                    checked
                    {

                        int tableStart = context.AllocateSpace(62, sizeof(int));
                        spanWriter.WriteUOffset(span, offset, tableStart, context);
                        int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                        Span<byte> vtable = stackalloc byte[26];
                        int maxVtableIndex = -1;
                        vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                        var index0Value = value.pos;
                        var index0Offset = 0;
                        if (index0Value != default(MyGame.Sample.Vec3))
                        {

                            currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                            index0Offset = currentOffset;
                            spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                            maxVtableIndex = 0;
                            currentOffset += 12;

                        }

                        var index1Value = value.mana;
                        var index1Offset = 0;
                        if (index1Value != (System.Int16)(150))
                        {

                            currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 2);
                            index1Offset = currentOffset;
                            spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                            maxVtableIndex = 1;
                            currentOffset += 2;

                        }

                        var index2Value = value.hp;
                        var index2Offset = 0;
                        if (index2Value != (System.Int16)(100))
                        {

                            currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 2);
                            index2Offset = currentOffset;
                            spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 8, context);
                            maxVtableIndex = 2;
                            currentOffset += 2;

                        }

                        var index3Value = value.name;
                        var index3Offset = 0;
                        if (index3Value != default(System.String))
                        {

                            currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                            index3Offset = currentOffset;
                            spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 10, context);
                            maxVtableIndex = 3;
                            currentOffset += 4;

                        }

                        var index5Value = value.inventory;
                        var index5Offset = 0;
                        if (index5Value != default(System.Collections.Generic.IList<System.Byte>))
                        {

                            currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                            index5Offset = currentOffset;
                            spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 14, context);
                            maxVtableIndex = 5;
                            currentOffset += 4;

                        }

                        var index6Value = value.color;
                        var index6Offset = 0;
                        if (index6Value != (MyGame.Sample.Color)(System.SByte)(2))
                        {

                            currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                            index6Offset = currentOffset;
                            spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 16, context);
                            maxVtableIndex = 6;
                            currentOffset += 1;

                        }

                        var index7Value = value.weapons;
                        var index7Offset = 0;
                        if (index7Value != default(System.Collections.Generic.IList<MyGame.Sample.Weapon>))
                        {

                            currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                            index7Offset = currentOffset;
                            spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 18, context);
                            maxVtableIndex = 7;
                            currentOffset += 4;

                        }

                        var index8Value = value.equipped;
                        var index8Offset = 0;
                        var index9Offset = 0;
                        if (index8Value != default(MyGame.Sample.Equipment))
                        {

                            currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                            index8Offset = currentOffset;
                            spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 20, context);
                            maxVtableIndex = 8;
                            currentOffset += 1;


                            currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                            index9Offset = currentOffset;
                            spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 22, context);
                            maxVtableIndex = 9;
                            currentOffset += 4;

                        }

                        var index10Value = value.path;
                        var index10Offset = 0;
                        if (index10Value != default(System.Collections.Generic.IList<MyGame.Sample.Vec3>))
                        {

                            currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                            index10Offset = currentOffset;
                            spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 24, context);
                            maxVtableIndex = 10;
                            currentOffset += 4;

                        }
                        int tableLength = currentOffset - tableStart;
                        context.Offset -= 62 - tableLength;
                        int vtableLength = 6 + (2 * maxVtableIndex);
                        spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                        spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                        int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                        spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                        if (index0Offset != 0)
                        {
                            WriteInlineValueOf_f6917f55d17a4358954e36f72761b68c(
                                spanWriter,
                                span,
                                index0Value,
                                index0Offset,
                                context);

                        }

                        if (index1Offset != 0)
                        {
                            WriteInlineValueOf_7d738ae7cd844b178d6371d1c455fcb1(
                                spanWriter,
                                span,
                                index1Value,
                                index1Offset,
                                context);

                        }

                        if (index2Offset != 0)
                        {
                            WriteInlineValueOf_7d738ae7cd844b178d6371d1c455fcb1(
                                spanWriter,
                                span,
                                index2Value,
                                index2Offset,
                                context);

                        }

                        if (index3Offset != 0)
                        {
                            WriteInlineValueOf_a661a87e0ec6485c9e56cd69a351113f(
                                spanWriter,
                                span,
                                index3Value,
                                index3Offset,
                                context);

                        }

                        if (index5Offset != 0)
                        {
                            WriteInlineValueOf_928ee2ec77a34be8be5994a71da46c23(
                                spanWriter,
                                span,
                                index5Value,
                                index5Offset,
                                context);

                        }

                        if (index6Offset != 0)
                        {
                            WriteInlineValueOf_49f75ab5ac47454f99f3c57d02034c64(
                                spanWriter,
                                span,
                                index6Value,
                                index6Offset,
                                context);

                        }

                        if (index7Offset != 0)
                        {
                            WriteInlineValueOf_e06a6a71b25d4ef3b18e42478bf08e9a(
                                spanWriter,
                                span,
                                index7Value,
                                index7Offset,
                                context);

                        }

                        if (index8Offset != 0)
                        {
                            var offsetTuple = (index8Offset, index9Offset);
                            WriteInlineValueOf_f2028d3c9eed4610901492fe1b4ec11d(
                                spanWriter,
                                span,
                                index8Value,
                                ref offsetTuple,
                                context);

                        }

                        if (index10Offset != 0)
                        {
                            WriteInlineValueOf_e014680f69064ee39e78271202763597(
                                spanWriter,
                                span,
                                index10Value,
                                index10Offset,
                                context);

                        }
                    }
                }

                private static int GetMaxSizeOf_f6917f55d17a4358954e36f72761b68c(MyGame.Sample.Vec3 value)
                {
                    checked
                    {
                        return 15;
                    }
                }

                private static MyGame.Sample.Vec3 Read_f6917f55d17a4358954e36f72761b68c<TInputBuffer>(
                    TInputBuffer buffer,
                    int offset) where TInputBuffer : IInputBuffer
                {
                    checked
                    {
                        return new structReader_8f3ff5f77f48489c9a89760a1ab050b6<TInputBuffer>(buffer, offset);
                    }
                }

                private sealed class structReader_8f3ff5f77f48489c9a89760a1ab050b6<TInputBuffer> : MyGame.Sample.Vec3 where TInputBuffer : IInputBuffer
                {



                    public structReader_8f3ff5f77f48489c9a89760a1ab050b6(TInputBuffer buffer, int offset)
                    {
                        checked
                        {
                            this.__index0 = __ReadIndex0Value(buffer, offset);
                            this.__index1 = __ReadIndex1Value(buffer, offset);
                            this.__index2 = __ReadIndex2Value(buffer, offset);
                        }
                    }

                    private System.Single __index0;
                    public override System.Single x
                    {
                        get
                        {
                            checked
                            { return this.__index0; }
                        }

                        set
                        {
                            checked
                            { this.__index0 = value; }
                        }
                    }

                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    private static System.Single __ReadIndex0Value(TInputBuffer buffer, int offset)
                    {
                        checked
                        {
                            return Read_2dc7a248b0714afa92f61a9dbabb5562(buffer, (offset + 0));
                        }
                    }

                    private System.Single __index1;
                    public override System.Single y
                    {
                        get
                        {
                            checked
                            { return this.__index1; }
                        }

                        set
                        {
                            checked
                            { this.__index1 = value; }
                        }
                    }

                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    private static System.Single __ReadIndex1Value(TInputBuffer buffer, int offset)
                    {
                        checked
                        {
                            return Read_2dc7a248b0714afa92f61a9dbabb5562(buffer, (offset + 4));
                        }
                    }

                    private System.Single __index2;
                    public override System.Single z
                    {
                        get
                        {
                            checked
                            { return this.__index2; }
                        }

                        set
                        {
                            checked
                            { this.__index2 = value; }
                        }
                    }

                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    private static System.Single __ReadIndex2Value(TInputBuffer buffer, int offset)
                    {
                        checked
                        {
                            return Read_2dc7a248b0714afa92f61a9dbabb5562(buffer, (offset + 8));
                        }
                    }
                }



                private static void WriteInlineValueOf_f6917f55d17a4358954e36f72761b68c<TSpanWriter>(
                    TSpanWriter spanWriter,
                    Span<byte> span,
                    MyGame.Sample.Vec3 value,
                    int offset,
                    SerializationContext context) where TSpanWriter : ISpanWriter
                {
                    checked
                    {
                        WriteInlineValueOf_2dc7a248b0714afa92f61a9dbabb5562(spanWriter, span, (value.x), (0 + offset), context);
                        WriteInlineValueOf_2dc7a248b0714afa92f61a9dbabb5562(spanWriter, span, (value.y), (4 + offset), context);
                        WriteInlineValueOf_2dc7a248b0714afa92f61a9dbabb5562(spanWriter, span, (value.z), (8 + offset), context);
                    }
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static int GetMaxSizeOf_2dc7a248b0714afa92f61a9dbabb5562(System.Single value)
                {
                    checked
                    {
                        return 7;
                    }
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Single Read_2dc7a248b0714afa92f61a9dbabb5562<TInputBuffer>(
                    TInputBuffer buffer,
                    int offset) where TInputBuffer : IInputBuffer
                {
                    checked
                    {
                        return buffer.ReadFloat(offset);
                    }
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static void WriteInlineValueOf_2dc7a248b0714afa92f61a9dbabb5562<TSpanWriter>(
                    TSpanWriter spanWriter,
                    Span<byte> span,
                    System.Single value,
                    int offset,
                    SerializationContext context) where TSpanWriter : ISpanWriter
                {
                    checked
                    {
                        spanWriter.WriteFloat(span, value, offset, context);
                    }
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static int GetMaxSizeOf_7d738ae7cd844b178d6371d1c455fcb1(System.Int16 value)
                {
                    checked
                    {
                        return 3;
                    }
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Int16 Read_7d738ae7cd844b178d6371d1c455fcb1<TInputBuffer>(
                    TInputBuffer buffer,
                    int offset) where TInputBuffer : IInputBuffer
                {
                    checked
                    {
                        return buffer.ReadShort(offset);
                    }
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static void WriteInlineValueOf_7d738ae7cd844b178d6371d1c455fcb1<TSpanWriter>(
                    TSpanWriter spanWriter,
                    Span<byte> span,
                    System.Int16 value,
                    int offset,
                    SerializationContext context) where TSpanWriter : ISpanWriter
                {
                    checked
                    {
                        spanWriter.WriteShort(span, value, offset, context);
                    }
                }

                private static int GetMaxSizeOf_a661a87e0ec6485c9e56cd69a351113f(System.String value)
                {
                    checked
                    {
                        return SerializationHelpers.GetMaxSize(value);
                    }
                }

                private static System.String Read_a661a87e0ec6485c9e56cd69a351113f<TInputBuffer>(
                    TInputBuffer buffer,
                    int offset) where TInputBuffer : IInputBuffer
                {
                    checked
                    {
                        return buffer.ReadString(offset);
                    }
                }

                private static void WriteInlineValueOf_a661a87e0ec6485c9e56cd69a351113f<TSpanWriter>(
                    TSpanWriter spanWriter,
                    Span<byte> span,
                    System.String value,
                    int offset,
                    SerializationContext context) where TSpanWriter : ISpanWriter
                {
                    checked
                    {
                        spanWriter.WriteString(span, value, offset, context);
                    }
                }

                private static int GetMaxSizeOf_928ee2ec77a34be8be5994a71da46c23(System.Collections.Generic.IList<System.Byte> value)
                {
                    checked
                    {
                        return 7 + 0 + (1 * value.Count);
                    }
                }

                private static System.Collections.Generic.IList<System.Byte> Read_928ee2ec77a34be8be5994a71da46c23<TInputBuffer>(
                    TInputBuffer buffer,
                    int offset) where TInputBuffer : IInputBuffer
                {
                    checked
                    {
                        return (new FlatBufferVector_a454daf2924c4b5fb8c8e12e080060ce<TInputBuffer>(
                            buffer,
                            offset + buffer.ReadUOffset(offset),
                            1)).FlatBufferVectorToList();
                    }
                }

                public sealed class FlatBufferVector_a454daf2924c4b5fb8c8e12e080060ce<TInputBuffer> : FlatBufferVector<System.Byte, TInputBuffer>
                    where TInputBuffer : IInputBuffer
                {
                    public FlatBufferVector_a454daf2924c4b5fb8c8e12e080060ce(
                        TInputBuffer memory,
                        int offset,
                        int itemSize) : base(memory, offset, itemSize)
                    {
                        checked
                        {
                        }
                    }

                    protected override System.Byte ParseItem(TInputBuffer memory, int offset)
                    {
                        checked
                        {
                            return Read_5c176a9b76274fd785330f41904e2f08(memory, offset);
                        }
                    }
                }



                private static void WriteInlineValueOf_928ee2ec77a34be8be5994a71da46c23<TSpanWriter>(
                    TSpanWriter spanWriter,
                    Span<byte> span,
                    System.Collections.Generic.IList<System.Byte> value,
                    int offset,
                    SerializationContext context) where TSpanWriter : ISpanWriter
                {
                    checked
                    {

                        int count = value.Count;
                        int vectorOffset = context.AllocateVector(1, count, 1);
                        spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                        spanWriter.WriteInt(span, count, vectorOffset, context);
                        vectorOffset += sizeof(int);
                        for (int i = 0; i < count; ++i)
                        {
                            var current = value[i];
                            ;
                            WriteInlineValueOf_5c176a9b76274fd785330f41904e2f08(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 1;
                        }
                    }
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static int GetMaxSizeOf_5c176a9b76274fd785330f41904e2f08(System.Byte value)
                {
                    checked
                    {
                        return 1;
                    }
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.Byte Read_5c176a9b76274fd785330f41904e2f08<TInputBuffer>(
                    TInputBuffer buffer,
                    int offset) where TInputBuffer : IInputBuffer
                {
                    checked
                    {
                        return buffer.ReadByte(offset);
                    }
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static void WriteInlineValueOf_5c176a9b76274fd785330f41904e2f08<TSpanWriter>(
                    TSpanWriter spanWriter,
                    Span<byte> span,
                    System.Byte value,
                    int offset,
                    SerializationContext context) where TSpanWriter : ISpanWriter
                {
                    checked
                    {
                        spanWriter.WriteByte(span, value, offset, context);
                    }
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static int GetMaxSizeOf_49f75ab5ac47454f99f3c57d02034c64(MyGame.Sample.Color value)
                {
                    checked
                    {
                        return GetMaxSizeOf_20bcc3bc98c04d57890907dcc93136c0((System.SByte)value);
                    }
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static MyGame.Sample.Color Read_49f75ab5ac47454f99f3c57d02034c64<TInputBuffer>(
                    TInputBuffer buffer,
                    int offset) where TInputBuffer : IInputBuffer
                {
                    checked
                    {
                        return (MyGame.Sample.Color)Read_20bcc3bc98c04d57890907dcc93136c0(buffer, offset);
                    }
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static void WriteInlineValueOf_49f75ab5ac47454f99f3c57d02034c64<TSpanWriter>(
                    TSpanWriter spanWriter,
                    Span<byte> span,
                    MyGame.Sample.Color value,
                    int offset,
                    SerializationContext context) where TSpanWriter : ISpanWriter
                {
                    checked
                    {
                        WriteInlineValueOf_20bcc3bc98c04d57890907dcc93136c0(spanWriter, span, (System.SByte)value, offset, context);
                    }
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static int GetMaxSizeOf_20bcc3bc98c04d57890907dcc93136c0(System.SByte value)
                {
                    checked
                    {
                        return 1;
                    }
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static System.SByte Read_20bcc3bc98c04d57890907dcc93136c0<TInputBuffer>(
                    TInputBuffer buffer,
                    int offset) where TInputBuffer : IInputBuffer
                {
                    checked
                    {
                        return buffer.ReadSByte(offset);
                    }
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                private static void WriteInlineValueOf_20bcc3bc98c04d57890907dcc93136c0<TSpanWriter>(
                    TSpanWriter spanWriter,
                    Span<byte> span,
                    System.SByte value,
                    int offset,
                    SerializationContext context) where TSpanWriter : ISpanWriter
                {
                    checked
                    {
                        spanWriter.WriteSByte(span, value, offset, context);
                    }
                }

                private static int GetMaxSizeOf_e06a6a71b25d4ef3b18e42478bf08e9a(System.Collections.Generic.IList<MyGame.Sample.Weapon> value)
                {
                    checked
                    {

                        int length = value.Count;
                        int runningSum = 7 + 7;
                        for (int i = 0; i < length; ++i)
                        {
                            var itemTemp = value[i];
                            SerializationHelpers.EnsureNonNull(itemTemp);
                            runningSum += GetMaxSizeOf_160fef30c05a4df796214099fe7b1542(itemTemp);
                        }
                        return runningSum;
                    }
                }

                private static System.Collections.Generic.IList<MyGame.Sample.Weapon> Read_e06a6a71b25d4ef3b18e42478bf08e9a<TInputBuffer>(
                    TInputBuffer buffer,
                    int offset) where TInputBuffer : IInputBuffer
                {
                    checked
                    {
                        return (new FlatBufferVector_916f30cdf9284cfc8fd73977f6672f04<TInputBuffer>(
                            buffer,
                            offset + buffer.ReadUOffset(offset),
                            4)).FlatBufferVectorToList();
                    }
                }

                public sealed class FlatBufferVector_916f30cdf9284cfc8fd73977f6672f04<TInputBuffer> : FlatBufferVector<MyGame.Sample.Weapon, TInputBuffer>
                    where TInputBuffer : IInputBuffer
                {
                    public FlatBufferVector_916f30cdf9284cfc8fd73977f6672f04(
                        TInputBuffer memory,
                        int offset,
                        int itemSize) : base(memory, offset, itemSize)
                    {
                        checked
                        {
                        }
                    }

                    protected override MyGame.Sample.Weapon ParseItem(TInputBuffer memory, int offset)
                    {
                        checked
                        {
                            return Read_160fef30c05a4df796214099fe7b1542(memory, offset);
                        }
                    }
                }



                private static void WriteInlineValueOf_e06a6a71b25d4ef3b18e42478bf08e9a<TSpanWriter>(
                    TSpanWriter spanWriter,
                    Span<byte> span,
                    System.Collections.Generic.IList<MyGame.Sample.Weapon> value,
                    int offset,
                    SerializationContext context) where TSpanWriter : ISpanWriter
                {
                    checked
                    {

                        int count = value.Count;
                        int vectorOffset = context.AllocateVector(4, count, 4);
                        spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                        spanWriter.WriteInt(span, count, vectorOffset, context);
                        vectorOffset += sizeof(int);
                        for (int i = 0; i < count; ++i)
                        {
                            var current = value[i];
                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_160fef30c05a4df796214099fe7b1542(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 4;
                        }
                    }
                }

                private static int GetMaxSizeOf_160fef30c05a4df796214099fe7b1542(MyGame.Sample.Weapon value)
                {
                    checked
                    {

                        int runningSum = 17 + 9;
                        var index0Value = value.name;

                        if (!object.ReferenceEquals(index0Value, null))
                        {
                            runningSum += GetMaxSizeOf_a661a87e0ec6485c9e56cd69a351113f(index0Value);
                        };
                        return runningSum;

                    }
                }

                private static MyGame.Sample.Weapon Read_160fef30c05a4df796214099fe7b1542<TInputBuffer>(
                    TInputBuffer buffer,
                    int offset) where TInputBuffer : IInputBuffer
                {
                    checked
                    {
                        return new tableReader_b7fc02fb49df46749c6df6021ea2c0a2<TInputBuffer>(buffer, offset + buffer.ReadUOffset(offset));
                    }
                }

                private sealed class tableReader_b7fc02fb49df46749c6df6021ea2c0a2<TInputBuffer> : MyGame.Sample.Weapon where TInputBuffer : IInputBuffer
                {



                    public tableReader_b7fc02fb49df46749c6df6021ea2c0a2(TInputBuffer buffer, int offset)
                    {
                        checked
                        {
                            this.__index0 = __ReadIndex0Value(buffer, offset);
                            this.__index1 = __ReadIndex1Value(buffer, offset);
                        }
                    }

                    private System.String __index0;
                    public override System.String name
                    {
                        get
                        {
                            checked
                            { return this.__index0; }
                        }

                        set
                        {
                            checked
                            { this.__index0 = value; }
                        }
                    }

                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    private static System.String __ReadIndex0Value(TInputBuffer buffer, int offset)
                    {
                        checked
                        {
                            int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 0);
                            if (absoluteLocation == 0)
                            {
                                return default(System.String);
                            }
                            else
                            {
                                return Read_a661a87e0ec6485c9e56cd69a351113f(buffer, absoluteLocation);
                            }
                        }
                    }

                    private System.Int16 __index1;
                    public override System.Int16 damage
                    {
                        get
                        {
                            checked
                            { return this.__index1; }
                        }

                        set
                        {
                            checked
                            { this.__index1 = value; }
                        }
                    }

                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    private static System.Int16 __ReadIndex1Value(TInputBuffer buffer, int offset)
                    {
                        checked
                        {
                            int absoluteLocation = buffer.GetAbsoluteTableFieldLocation(offset, 1);
                            if (absoluteLocation == 0)
                            {
                                return default(System.Int16);
                            }
                            else
                            {
                                return Read_7d738ae7cd844b178d6371d1c455fcb1(buffer, absoluteLocation);
                            }
                        }
                    }
                }



                private static void WriteInlineValueOf_160fef30c05a4df796214099fe7b1542<TSpanWriter>(
                    TSpanWriter spanWriter,
                    Span<byte> span,
                    MyGame.Sample.Weapon value,
                    int offset,
                    SerializationContext context) where TSpanWriter : ISpanWriter
                {
                    checked
                    {

                        int tableStart = context.AllocateSpace(14, sizeof(int));
                        spanWriter.WriteUOffset(span, offset, tableStart, context);
                        int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                        Span<byte> vtable = stackalloc byte[8];
                        int maxVtableIndex = -1;
                        vtable.Clear(); // reset to 0. Random memory from the stack isn't trustworthy.


                        var index0Value = value.name;
                        var index0Offset = 0;
                        if (index0Value != default(System.String))
                        {

                            currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                            index0Offset = currentOffset;
                            spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 4, context);
                            maxVtableIndex = 0;
                            currentOffset += 4;

                        }

                        var index1Value = value.damage;
                        var index1Offset = 0;
                        if (index1Value != default(System.Int16))
                        {

                            currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 2);
                            index1Offset = currentOffset;
                            spanWriter.WriteUShort(vtable, (ushort)(currentOffset - tableStart), 6, context);
                            maxVtableIndex = 1;
                            currentOffset += 2;

                        }
                        int tableLength = currentOffset - tableStart;
                        context.Offset -= 14 - tableLength;
                        int vtableLength = 6 + (2 * maxVtableIndex);
                        spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0, context);
                        spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort), context);
                        int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                        spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart, context);

                        if (index0Offset != 0)
                        {
                            WriteInlineValueOf_a661a87e0ec6485c9e56cd69a351113f(
                                spanWriter,
                                span,
                                index0Value,
                                index0Offset,
                                context);

                        }

                        if (index1Offset != 0)
                        {
                            WriteInlineValueOf_7d738ae7cd844b178d6371d1c455fcb1(
                                spanWriter,
                                span,
                                index1Value,
                                index1Offset,
                                context);

                        }
                    }
                }

                private static int GetMaxSizeOf_f2028d3c9eed4610901492fe1b4ec11d(MyGame.Sample.Equipment value)
                {
                    checked
                    {

                        switch (value.Discriminator)
                        {

                            case 1:
                                return GetMaxSizeOf_160fef30c05a4df796214099fe7b1542(value.Item1);
                            default:
                                throw new System.InvalidOperationException("Exception determining type of union. Discriminator = " + value.Discriminator);
                        }

                    }
                }

                private static MyGame.Sample.Equipment Read_f2028d3c9eed4610901492fe1b4ec11d<TInputBuffer>(
                    TInputBuffer buffer,
                    ref (int offset0, int offset1) offset) where TInputBuffer : IInputBuffer
                {
                    checked
                    {

                        byte discriminator = buffer.ReadByte(offset.offset0);
                        int offsetLocation = offset.offset1;
                        if (discriminator == 0 && offsetLocation != 0)
                            throw new System.IO.InvalidDataException("FlatBuffer union had discriminator set but no offset.");

                        switch (discriminator)
                        {

                            case 1:

                                return new MyGame.Sample.Equipment(Read_160fef30c05a4df796214099fe7b1542(buffer, offsetLocation));

                            default:
                                return null;
                        }

                    }
                }

                private static void WriteInlineValueOf_f2028d3c9eed4610901492fe1b4ec11d<TSpanWriter>(
                    TSpanWriter spanWriter,
                    Span<byte> span,
                    MyGame.Sample.Equipment value,
                    ref (int offset0, int offset1) offset,
                    SerializationContext context) where TSpanWriter : ISpanWriter
                {
                    checked
                    {

                        byte discriminatorValue = value.Discriminator;
                        spanWriter.WriteByte(
                            span,
                            discriminatorValue,
                            offset.offset0,
                            context);

                        switch (discriminatorValue)
                        {

                            case 1:
                                {
                                    var writeOffset = offset.offset1;
                                    WriteInlineValueOf_160fef30c05a4df796214099fe7b1542(spanWriter, span, value.Item1, writeOffset, context);
                                }
                                break;
                            default: throw new InvalidOperationException("Unexpected");
                        }
                    }
                }

                private static int GetMaxSizeOf_e014680f69064ee39e78271202763597(System.Collections.Generic.IList<MyGame.Sample.Vec3> value)
                {
                    checked
                    {
                        return 7 + 3 + (12 * value.Count);
                    }
                }

                private static System.Collections.Generic.IList<MyGame.Sample.Vec3> Read_e014680f69064ee39e78271202763597<TInputBuffer>(
                    TInputBuffer buffer,
                    int offset) where TInputBuffer : IInputBuffer
                {
                    checked
                    {
                        return (new FlatBufferVector_76280e508bc4488f9b7ef7f8f61af12c<TInputBuffer>(
                            buffer,
                            offset + buffer.ReadUOffset(offset),
                            12)).FlatBufferVectorToList();
                    }
                }

                public sealed class FlatBufferVector_76280e508bc4488f9b7ef7f8f61af12c<TInputBuffer> : FlatBufferVector<MyGame.Sample.Vec3, TInputBuffer>
                    where TInputBuffer : IInputBuffer
                {
                    public FlatBufferVector_76280e508bc4488f9b7ef7f8f61af12c(
                        TInputBuffer memory,
                        int offset,
                        int itemSize) : base(memory, offset, itemSize)
                    {
                        checked
                        {
                        }
                    }

                    protected override MyGame.Sample.Vec3 ParseItem(TInputBuffer memory, int offset)
                    {
                        checked
                        {
                            return Read_f6917f55d17a4358954e36f72761b68c(memory, offset);
                        }
                    }
                }



                private static void WriteInlineValueOf_e014680f69064ee39e78271202763597<TSpanWriter>(
                    TSpanWriter spanWriter,
                    Span<byte> span,
                    System.Collections.Generic.IList<MyGame.Sample.Vec3> value,
                    int offset,
                    SerializationContext context) where TSpanWriter : ISpanWriter
                {
                    checked
                    {

                        int count = value.Count;
                        int vectorOffset = context.AllocateVector(4, count, 12);
                        spanWriter.WriteUOffset(span, offset, vectorOffset, context);
                        spanWriter.WriteInt(span, count, vectorOffset, context);
                        vectorOffset += sizeof(int);
                        for (int i = 0; i < count; ++i)
                        {
                            var current = value[i];
                            SerializationHelpers.EnsureNonNull(current);
                            WriteInlineValueOf_f6917f55d17a4358954e36f72761b68c(spanWriter, span, current, vectorOffset, context);
                            vectorOffset += 12;
                        }
                    }
                }
            }

            #endregion
        }
        [FlatBufferTable]
        [System.Runtime.CompilerServices.CompilerGenerated]
        public partial class Weapon : object
        {
            partial void OnInitialized();
            public Weapon()
            {
                checked
                { this.OnInitialized(); }
            }

            public Weapon(Weapon source)
            {
                checked
                {
                    this.name = source.name;
                    this.damage = source.damage;
                    this.OnInitialized();
                }
            }

            [FlatBufferItem(0)]
            public virtual System.String name { get; set; }
            [FlatBufferItem(1)]
            public virtual System.Int16 damage { get; set; }
        }
    }
}
